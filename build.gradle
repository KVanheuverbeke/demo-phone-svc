plugins {
    id 'org.springframework.boot' version '2.7.12'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'groovy'
}

sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jar {
    enabled = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //swagger + monitoring
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.8'
    //implementation group: 'de.codecentric', name: 'spring-boot-admin-starter-client', version: '2.6.6'
    implementation group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.11.0'

    implementation group: 'com.googlecode.libphonenumber', name: 'libphonenumber', version: '8.13.12'

    //lombok
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.0-groovy-3.0'
    testImplementation group: 'org.spockframework', name: 'spock-spring', version: '2.0-groovy-3.0'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/config/**",
                    "**/beans/**"
            ])
        }))
    }
}

processResources {
    filesMatching('application.yaml') {
        expand(project.properties)
    }
}